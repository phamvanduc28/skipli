{"ast":null,"code":"import { io } from 'socket.io-client';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.listeners = new Map();\n  }\n  connect(token) {\n    var _this$socket;\n    if ((_this$socket = this.socket) !== null && _this$socket !== void 0 && _this$socket.connected) {\n      return this.socket;\n    }\n    const socketUrl = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\n    this.socket = io(socketUrl, {\n      auth: {\n        token: token\n      },\n      transports: ['websocket', 'polling']\n    });\n    this.setupEventListeners();\n    return this.socket;\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n  }\n  setupEventListeners() {\n    if (!this.socket) return;\n    this.socket.on('connect', () => {\n      console.log('Socket connected:', this.socket.id);\n    });\n    this.socket.on('disconnect', reason => {\n      console.log('Socket disconnected:', reason);\n    });\n    this.socket.on('connect_error', error => {\n      console.error('Socket connection error:', error);\n    });\n    this.listeners.forEach((callback, event) => {\n      this.socket.on(event, callback);\n    });\n  }\n  on(event, callback) {\n    if (this.socket) {\n      this.socket.on(event, callback);\n    }\n    this.listeners.set(event, callback);\n  }\n  off(event, callback) {\n    if (this.socket) {\n      this.socket.off(event, callback);\n    }\n    this.listeners.delete(event);\n  }\n  emit(event, data) {\n    if (this.socket) {\n      this.socket.emit(event, data);\n    }\n  }\n  joinChat(otherUserId) {\n    this.emit('join-chat', {\n      otherUserId\n    });\n  }\n  sendMessage(toUserId, message, type = 'text') {\n    this.emit('send-message', {\n      toUserId,\n      message,\n      type\n    });\n  }\n  startTyping(toUserId) {\n    this.emit('typing-start', {\n      toUserId\n    });\n  }\n  stopTyping(toUserId) {\n    this.emit('typing-stop', {\n      toUserId\n    });\n  }\n  notifyTaskUpdate(taskData) {\n    this.emit('task-updated', taskData);\n  }\n  isConnected() {\n    var _this$socket2;\n    return ((_this$socket2 = this.socket) === null || _this$socket2 === void 0 ? void 0 : _this$socket2.connected) || false;\n  }\n  getSocketId() {\n    var _this$socket3;\n    return (_this$socket3 = this.socket) === null || _this$socket3 === void 0 ? void 0 : _this$socket3.id;\n  }\n}\nconst socketService = new SocketService();\nexport default socketService;","map":{"version":3,"names":["io","SocketService","constructor","socket","listeners","Map","connect","token","_this$socket","connected","socketUrl","process","env","REACT_APP_SOCKET_URL","auth","transports","setupEventListeners","disconnect","on","console","log","id","reason","error","forEach","callback","event","set","off","delete","emit","data","joinChat","otherUserId","sendMessage","toUserId","message","type","startTyping","stopTyping","notifyTaskUpdate","taskData","isConnected","_this$socket2","getSocketId","_this$socket3","socketService"],"sources":["/Volumes/vanduc/skipli/frontend/src/services/socketService.js"],"sourcesContent":["import { io } from 'socket.io-client';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.listeners = new Map();\n  }\n  connect(token) {\n    if (this.socket?.connected) {\n      return this.socket;\n    }\n    const socketUrl = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\n    this.socket = io(socketUrl, {\n      auth: {\n        token: token\n      },\n      transports: ['websocket', 'polling']\n    });\n    this.setupEventListeners();\n    return this.socket;\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n  }\n  setupEventListeners() {\n    if (!this.socket) return;\n    this.socket.on('connect', () => {\n      console.log('Socket connected:', this.socket.id);\n    });\n    this.socket.on('disconnect', (reason) => {\n      console.log('Socket disconnected:', reason);\n    });\n    this.socket.on('connect_error', (error) => {\n      console.error('Socket connection error:', error);\n    });\n    this.listeners.forEach((callback, event) => {\n      this.socket.on(event, callback);\n    });\n  }\n  on(event, callback) {\n    if (this.socket) {\n      this.socket.on(event, callback);\n    }\n    this.listeners.set(event, callback);\n  }\n  off(event, callback) {\n    if (this.socket) {\n      this.socket.off(event, callback);\n    }\n    this.listeners.delete(event);\n  }\n  emit(event, data) {\n    if (this.socket) {\n      this.socket.emit(event, data);\n    }\n  }\n  joinChat(otherUserId) {\n    this.emit('join-chat', { otherUserId });\n  }\n  sendMessage(toUserId, message, type = 'text') {\n    this.emit('send-message', { toUserId, message, type });\n  }\n  startTyping(toUserId) {\n    this.emit('typing-start', { toUserId });\n  }\n  stopTyping(toUserId) {\n    this.emit('typing-stop', { toUserId });\n  }\n  notifyTaskUpdate(taskData) {\n    this.emit('task-updated', taskData);\n  }\n  isConnected() {\n    return this.socket?.connected || false;\n  }\n  getSocketId() {\n    return this.socket?.id;\n  }\n}\nconst socketService = new SocketService();\nexport default socketService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}