{"ast":null,"code":"var _jsxFileName = \"/Volumes/vanduc/skipli/frontend/src/context/SocketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useRef } from 'react';\nimport { toast } from 'react-toastify';\nimport socketService from '../services/socketService';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nexport const SocketProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    isAuthenticated,\n    token,\n    user\n  } = useAuth();\n  const connectedRef = useRef(false);\n  useEffect(() => {\n    if (isAuthenticated && token && !connectedRef.current) {\n      socketService.connect(token);\n      connectedRef.current = true;\n      setupGlobalListeners();\n      console.log('Socket connected for user:', user === null || user === void 0 ? void 0 : user.id);\n    } else if (!isAuthenticated && connectedRef.current) {\n      socketService.disconnect();\n      connectedRef.current = false;\n      console.log('Socket disconnected');\n    }\n    return () => {\n      if (connectedRef.current) {\n        socketService.disconnect();\n        connectedRef.current = false;\n      }\n    };\n  }, [isAuthenticated, token, user === null || user === void 0 ? void 0 : user.id]);\n  const setupGlobalListeners = () => {\n    socketService.on('connect', () => {\n      console.log('Socket connected successfully');\n      toast.success('Connected to real-time services');\n    });\n    socketService.on('disconnect', reason => {\n      console.log('Socket disconnected:', reason);\n      if (reason !== 'io client disconnect') {\n        toast.warn('Real-time connection lost. Attempting to reconnect...');\n      }\n    });\n    socketService.on('connect_error', error => {\n      console.error('Socket connection error:', error);\n      toast.error('Failed to connect to real-time services');\n    });\n    socketService.on('new-message', data => {\n      console.log('New message received:', data);\n      const currentPath = window.location.pathname;\n      const isInChatWithSender = currentPath.includes('/chat') && currentPath.includes(data.from);\n      if (!isInChatWithSender) {\n        toast.info(`New message from ${data.senderRole === 'owner' ? 'Manager' : 'Employee'}`);\n      }\n    });\n    socketService.on('message-sent', data => {\n      console.log('Message sent successfully:', data);\n    });\n    socketService.on('message-error', data => {\n      console.error('Message error:', data);\n      toast.error('Failed to send message');\n    });\n    socketService.on('user-typing', data => {\n      console.log('User typing:', data);\n    });\n    socketService.on('new-task-assigned', data => {\n      console.log('New task assigned:', data);\n      if ((user === null || user === void 0 ? void 0 : user.role) === 'employee' && data.assignedTo === user.id) {\n        toast.info('You have been assigned a new task!');\n      }\n    });\n    socketService.on('task-updated', data => {\n      console.log('Task updated:', data);\n      const isTaskCreator = data.task.createdBy === (user === null || user === void 0 ? void 0 : user.id);\n      const isTaskAssignee = data.task.assignedTo === (user === null || user === void 0 ? void 0 : user.id);\n      const updatedByCurrentUser = data.updatedBy === (user === null || user === void 0 ? void 0 : user.id);\n      if (!updatedByCurrentUser && (isTaskCreator || isTaskAssignee)) {\n        const updaterRole = data.updatedByRole === 'owner' ? 'Manager' : 'Employee';\n        toast.info(`Task \"${data.task.title}\" was updated by ${updaterRole}`);\n      }\n    });\n    socketService.on('task-status-updated', data => {\n      console.log('Task status updated:', data);\n      if ((user === null || user === void 0 ? void 0 : user.role) === 'owner' && data.task.createdBy === user.id) {\n        toast.info(`Task status updated: ${data.task.title} is now ${data.task.status}`);\n      }\n    });\n    socketService.on('task-deleted', data => {\n      console.log('Task deleted:', data);\n      if ((user === null || user === void 0 ? void 0 : user.role) === 'employee' && data.assignedTo === user.id) {\n        toast.info('One of your assigned tasks has been removed');\n      }\n    });\n    socketService.on('employee-added', data => {\n      console.log('New employee added:', data);\n      if ((user === null || user === void 0 ? void 0 : user.role) === 'owner') {\n        toast.success(`New employee added: ${data.employee.name}`);\n      }\n    });\n    socketService.on('employee-updated', data => {\n      console.log('Employee updated:', data);\n      if ((user === null || user === void 0 ? void 0 : user.role) === 'owner') {\n        toast.info(`Employee updated: ${data.employee.name}`);\n      }\n    });\n    socketService.on('employee-deleted', data => {\n      console.log('Employee deleted:', data);\n      if ((user === null || user === void 0 ? void 0 : user.role) === 'owner') {\n        toast.info('An employee has been removed from the system');\n      }\n    });\n    socketService.on('task-notification', data => {\n      console.log('Task notification:', data);\n      switch (data.type) {\n        case 'task-updated':\n          toast.info(`Task notification: ${data.task.title}`);\n          break;\n        default:\n          console.log('Unknown notification type:', data.type);\n      }\n    });\n  };\n  const sendMessage = (toUserId, message, type = 'text') => {\n    socketService.sendMessage(toUserId, message, type);\n  };\n  const joinChat = otherUserId => {\n    socketService.joinChat(otherUserId);\n  };\n  const startTyping = toUserId => {\n    socketService.startTyping(toUserId);\n  };\n  const stopTyping = toUserId => {\n    socketService.stopTyping(toUserId);\n  };\n  const notifyTaskUpdate = taskData => {\n    socketService.notifyTaskUpdate(taskData);\n  };\n  const addEventListener = (event, callback) => {\n    socketService.on(event, callback);\n  };\n  const removeEventListener = (event, callback) => {\n    socketService.off(event, callback);\n  };\n  const isConnected = () => {\n    return socketService.isConnected();\n  };\n  const getSocketId = () => {\n    return socketService.getSocketId();\n  };\n  const value = {\n    isConnected: connectedRef.current && socketService.isConnected(),\n    sendMessage,\n    joinChat,\n    startTyping,\n    stopTyping,\n    notifyTaskUpdate,\n    addEventListener,\n    removeEventListener,\n    getSocketId,\n    socketService\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n};\n_s(SocketProvider, \"iKPICMdKl8jO7N9QbqbnbD06U2c=\", false, function () {\n  return [useAuth];\n});\n_c = SocketProvider;\nexport const useSocket = () => {\n  _s2();\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n_s2(useSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default SocketContext;\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useRef","toast","socketService","useAuth","jsxDEV","_jsxDEV","SocketContext","SocketProvider","children","_s","isAuthenticated","token","user","connectedRef","current","connect","setupGlobalListeners","console","log","id","disconnect","on","success","reason","warn","error","data","currentPath","window","location","pathname","isInChatWithSender","includes","from","info","senderRole","role","assignedTo","isTaskCreator","task","createdBy","isTaskAssignee","updatedByCurrentUser","updatedBy","updaterRole","updatedByRole","title","status","employee","name","type","sendMessage","toUserId","message","joinChat","otherUserId","startTyping","stopTyping","notifyTaskUpdate","taskData","addEventListener","event","callback","removeEventListener","off","isConnected","getSocketId","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSocket","_s2","context","Error","$RefreshReg$"],"sources":["/Volumes/vanduc/skipli/frontend/src/context/SocketContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useRef } from 'react';\nimport { toast } from 'react-toastify';\nimport socketService from '../services/socketService';\nimport { useAuth } from './AuthContext';\nconst SocketContext = createContext();\nexport const SocketProvider = ({ children }) => {\n  const { isAuthenticated, token, user } = useAuth();\n  const connectedRef = useRef(false);\n  useEffect(() => {\n    if (isAuthenticated && token && !connectedRef.current) {\n      socketService.connect(token);\n      connectedRef.current = true;\n      setupGlobalListeners();\n      console.log('Socket connected for user:', user?.id);\n    } else if (!isAuthenticated && connectedRef.current) {\n      socketService.disconnect();\n      connectedRef.current = false;\n      console.log('Socket disconnected');\n    }\n    return () => {\n      if (connectedRef.current) {\n        socketService.disconnect();\n        connectedRef.current = false;\n      }\n    };\n  }, [isAuthenticated, token, user?.id]);\n  const setupGlobalListeners = () => {\n    socketService.on('connect', () => {\n      console.log('Socket connected successfully');\n      toast.success('Connected to real-time services');\n    });\n    socketService.on('disconnect', (reason) => {\n      console.log('Socket disconnected:', reason);\n      if (reason !== 'io client disconnect') {\n        toast.warn('Real-time connection lost. Attempting to reconnect...');\n      }\n    });\n    socketService.on('connect_error', (error) => {\n      console.error('Socket connection error:', error);\n      toast.error('Failed to connect to real-time services');\n    });\n    socketService.on('new-message', (data) => {\n      console.log('New message received:', data);\n      const currentPath = window.location.pathname;\n      const isInChatWithSender = currentPath.includes('/chat') && \n                                 currentPath.includes(data.from);\n      if (!isInChatWithSender) {\n        toast.info(`New message from ${data.senderRole === 'owner' ? 'Manager' : 'Employee'}`);\n      }\n    });\n    socketService.on('message-sent', (data) => {\n      console.log('Message sent successfully:', data);\n    });\n    socketService.on('message-error', (data) => {\n      console.error('Message error:', data);\n      toast.error('Failed to send message');\n    });\n    socketService.on('user-typing', (data) => {\n      console.log('User typing:', data);\n    });\n    socketService.on('new-task-assigned', (data) => {\n      console.log('New task assigned:', data);\n      if (user?.role === 'employee' && data.assignedTo === user.id) {\n        toast.info('You have been assigned a new task!');\n      }\n    });\n    socketService.on('task-updated', (data) => {\n      console.log('Task updated:', data);\n      const isTaskCreator = data.task.createdBy === user?.id;\n      const isTaskAssignee = data.task.assignedTo === user?.id;\n      const updatedByCurrentUser = data.updatedBy === user?.id;\n      if (!updatedByCurrentUser && (isTaskCreator || isTaskAssignee)) {\n        const updaterRole = data.updatedByRole === 'owner' ? 'Manager' : 'Employee';\n        toast.info(`Task \"${data.task.title}\" was updated by ${updaterRole}`);\n      }\n    });\n    socketService.on('task-status-updated', (data) => {\n      console.log('Task status updated:', data);\n      if (user?.role === 'owner' && data.task.createdBy === user.id) {\n        toast.info(`Task status updated: ${data.task.title} is now ${data.task.status}`);\n      }\n    });\n    socketService.on('task-deleted', (data) => {\n      console.log('Task deleted:', data);\n      if (user?.role === 'employee' && data.assignedTo === user.id) {\n        toast.info('One of your assigned tasks has been removed');\n      }\n    });\n    socketService.on('employee-added', (data) => {\n      console.log('New employee added:', data);\n      if (user?.role === 'owner') {\n        toast.success(`New employee added: ${data.employee.name}`);\n      }\n    });\n    socketService.on('employee-updated', (data) => {\n      console.log('Employee updated:', data);\n      if (user?.role === 'owner') {\n        toast.info(`Employee updated: ${data.employee.name}`);\n      }\n    });\n    socketService.on('employee-deleted', (data) => {\n      console.log('Employee deleted:', data);\n      if (user?.role === 'owner') {\n        toast.info('An employee has been removed from the system');\n      }\n    });\n    socketService.on('task-notification', (data) => {\n      console.log('Task notification:', data);\n      switch (data.type) {\n        case 'task-updated':\n          toast.info(`Task notification: ${data.task.title}`);\n          break;\n        default:\n          console.log('Unknown notification type:', data.type);\n      }\n    });\n  };\n  const sendMessage = (toUserId, message, type = 'text') => {\n    socketService.sendMessage(toUserId, message, type);\n  };\n  const joinChat = (otherUserId) => {\n    socketService.joinChat(otherUserId);\n  };\n  const startTyping = (toUserId) => {\n    socketService.startTyping(toUserId);\n  };\n  const stopTyping = (toUserId) => {\n    socketService.stopTyping(toUserId);\n  };\n  const notifyTaskUpdate = (taskData) => {\n    socketService.notifyTaskUpdate(taskData);\n  };\n  const addEventListener = (event, callback) => {\n    socketService.on(event, callback);\n  };\n  const removeEventListener = (event, callback) => {\n    socketService.off(event, callback);\n  };\n  const isConnected = () => {\n    return socketService.isConnected();\n  };\n  const getSocketId = () => {\n    return socketService.getSocketId();\n  };\n  const value = {\n    isConnected: connectedRef.current && socketService.isConnected(),\n    sendMessage,\n    joinChat,\n    startTyping,\n    stopTyping,\n    notifyTaskUpdate,\n    addEventListener,\n    removeEventListener,\n    getSocketId,\n    socketService,\n  };\n  return (\n    <SocketContext.Provider value={value}>\n      {children}\n    </SocketContext.Provider>\n  );\n};\nexport const useSocket = () => {\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\nexport default SocketContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}